module glued.scan;

import std.stdio;
import std.conv;
import std.array;
import std.ascii;
import std.random;
import std.typecons;
import std.meta;
import std.traits;
import std.variant;
import std.range;
import std.algorithm;
import std.string;

import glued.mirror;
import glued.context;

//interface Processor {
//    void process(string m, string n)();
//}

//alias Processor void delegate(string m, string n)

struct Scanner(alias processor) {
    //Processor processor;
   
    public void scan(string root, string qualifier="", string testQualifier="test")(){
        scanIndexModule!(root~"."~(qualifier.length ? "_"~qualifier : "")~"_index")();
        version(unittest){
            scanIndexModule!(root~"."~(testQualifier.length ? "_"~testQualifier : "")~"_index")();
        }
    }

    private void scanIndexModule(string index)(){
        mixin("static import "~index~";");
        mixin("alias mod_ = "~index~";");
                
        static if (mod_.Index.importablePackage)
            scanModule!(mod_.Index.packageName)();
        static foreach (string submodule; EnumMembers!(mod_.Index.submodules)){
            scanModule!(submodule);
        }
        static foreach (string subpackage; EnumMembers!(mod_.Index.subpackages)){
            scan!(subpackage, foo);
        }
    }
    
    private static bool isGluedImplModule(string name)
    {
        auto parts = name.split(".");
        if (parts.length == 2)
            return parts[0] == "glued";
        return false;
    }
    
    private void scanModule(string name)(){
        static if (!isGluedImplModule(name))
        {
            mixin("static import "~name~";");
            mixin("alias mod_ = "~name~";");
            static foreach (alias mem; __traits(allMembers, mod_)){
                static if (__traits(compiles, __traits(getMember, mod_, mem))){
                    static if (is(__traits(getMember, mod_, mem))){
                        processor!(name, mem)();
    //                    BackboneContext.get().track!(Alias!(__traits(getMember, mod_, mem)))();
                    }
                }
            }
        }
    }
}

/*
void scan(string root)(){
    alias index = import_!(root~"._index", "Index");
    void scanModule(string name)(){
        auto m = module_!(name)();
        static foreach (Aggregate a; m.aggregates){
            pragma(msg, "scanned ", a);
            BackboneContext.get().track!(name, a.name)();
        }
    }
    scanModule!(__traits(getMember, index, "packageName"))();
    static foreach (string submodule; EnumMembers!(index.submodules)){
        scanModule!(submodule)();
    }
    
    static foreach (string subpackage; EnumMembers!(index.subpackages)){
        scan!(subpackage);
    }
}*/


